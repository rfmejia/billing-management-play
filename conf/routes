# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Entry point and documentation
GET      /api                          @controllers.Application.index
GET      /api/docs                     @controllers.Application.documentation

# Log
POST     /api/logservice               @controllers.Logs.log

# Tenants
GET      /api/tenants                  @controllers.Tenants.list(offset: Int ?= 0, limit: Int ?= 10)
GET      /api/tenants/:id              @controllers.Tenants.show(id: Int)
POST     /api/tenants                  @controllers.Tenants.create
PUT      /api/tenants/:id              @controllers.Tenants.edit(id: Int)
DELETE   /api/tenants/:id              @controllers.Tenants.delete(id: Int)

# Users
GET      /api/users                    @controllers.Users.list(offset: Int ?= 0, limit: Int ?= 10)
GET      /api/users/me                 @controllers.Users.showCurrentUser()
GET      /api/users/:userId            @controllers.Users.show(userId: String)
PUT      /api/users/:userId            @controllers.Users.edit(userId: String)
DELETE   /api/users/:userId            @controllers.Users.delete(userId: String)

# Workflow
GET      /api/mailboxes                @controllers.Workflow.listMailboxes
POST     /api/documents/:id/:box       @controllers.Workflow.moveMailbox(id: Int, box: String)

# Documents
GET      /api/documents                @controllers.Documents.list(offset: Int ?= 0, limit: Int ?= 10, mailbox: String ?= "", forTenant: Int ?= -1, creator: String ?= "", assigned: Option[String] ?= None, year: Option[Int] ?= None, month: Option[Int] ?= None, isPaid: Option[Boolean] ?= None, others: Option[Boolean] ?= None, isAssigned: Option[Boolean] ?= None)
GET      /api/documents/:id            @controllers.Documents.show(id: Int)
POST     /api/documents                @controllers.Documents.create
PUT      /api/documents/:id            @controllers.Documents.edit(id: Int)
DELETE   /api/documents/:id            @controllers.Documents.delete(id: Int)

GET      /api/documents/:id/logs       @controllers.ActionLogs.show(id: Int)

PUT      /api/documents/:id/assigned   @controllers.Documents.assignToMe(id: Int)
DELETE   /api/documents/:id/assigned   @controllers.Documents.unassign(id: Int)

# Templates
GET      /api/templates                @controllers.Templates.list(offset: Int ?= 0, limit: Int ?= 10)
GET      /api/templates/:docType       @controllers.Templates.show(docType: String)

# Test routes
GET      /api/setupTestEnvironment     @controllers.TestEnvironment.setup
GET      /api/testFail                 @controllers.TestEnvironment.fail
POST     /api/test/tenants             @controllers.TestEnvironment.uploadTenants(timeout: Int ?= 10000)
POST     /api/test/documents           @controllers.TestEnvironment.uploadDocuments(timeout: Int ?= 10000)

# Reports
GET      /api/reports                  @controllers.Reports.show(year: Option[Int] ?= None, month: Option[Int] ?= None)

# Admin routes
PUT      /api/admin/users/:userId/roles @controllers.Users.editRoles(userId: String)

# ---- SecureSocial (master-SNAPSHOT) routes ----
# Note: Many SecureSocial LOCs come from http://www.filtercode.com/play/play-scala-securesocial

# Login page
GET      /login                        @securesocial.controllers.LoginPage.login
GET      /logout                       @securesocial.controllers.LoginPage.logout

# User registration and password handling
GET      /admin/invite                 @controllers.Invitation.startInvite
POST     /admin/invite                 @controllers.Invitation.handleStartInvite

GET      /signup/:token                @securesocial.controllers.Registration.signUp(token)
POST     /signup/:token                @controllers.Invitation.handleSignUp(token)

GET      /password                     @securesocial.controllers.PasswordChange.page
POST     /password                     @securesocial.controllers.PasswordChange.handlePasswordChange

# Reset password
GET      /reset                        @securesocial.controllers.PasswordReset.startResetPassword
POST     /reset                        @securesocial.controllers.PasswordReset.handleStartResetPassword
GET      /reset/:mailToken             @securesocial.controllers.PasswordReset.resetPassword(mailToken)
POST     /reset/:mailToken             @securesocial.controllers.PasswordReset.handleResetPassword(mailToken)

# Providers entry points
GET      /authenticate/:provider       @securesocial.controllers.ProviderController.authenticate(provider, redirectTo: Option[String])
POST     /authenticate/:provider       @securesocial.controllers.ProviderController.authenticateByPost(provider, redirectTo: Option[String])

# Authentication API
POST     /api/authenticate/:provider   @securesocial.controllers.LoginApi.authenticate(provider, builder = "token")

# ---- Web application routes ----
GET      /                             controllers.Assets.at(path="/public", file="index.html")
# Note: Catch-all route must be the last in the definition
GET      /assets/*file                 controllers.Assets.at(path="/public/assets", file)
GET      /assets/*file                 securesocial.controllers.Assets.at(path="/public/securesocial", file)
GET      /*file                        controllers.Assets.at(path="/public", file)

