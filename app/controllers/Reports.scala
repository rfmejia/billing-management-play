package controllers

import com.nooovle._
import com.nooovle.slick.ConnectionFactory
import com.github.tototoshi.slick.H2JodaSupport
import com.nooovle.slick.models._
import org.joda.time.{ DateTime, YearMonth }
import org.locker47.json.play._
import play.api._
import play.api.libs.json._
import play.api.mvc.{ Action, RequestHeader }
import scala.slick.driver.H2Driver.simple._
import scala.util.{ Try, Success, Failure }
import securesocial.core._

class Reports(override implicit val env: RuntimeEnvironment[User])
  extends ApiController[User] {

  def show(year: Int, month: Int) = Action { implicit request =>
    val forMonth = new YearMonth(year, month)
    val docs = ConnectionFactory.connect withSession { implicit session =>
      val query = for (doc <- documents if doc.year === year && doc.month === month) yield doc
      query.list
    }

    val totals: Amounts = docs.map(extractTotal).foldLeft(Amounts.ZERO)(_ + _)
    val paid: Amounts = docs.map(extractPaid).foldLeft(Amounts.ZERO)(_ + _)
    val unpaid = totals - paid

    val self = routes.Reports.show(year, month)
    val generationTime = DateTime.now
    val obj = HalJsObject.create(self.absoluteURL())
      .withCurie("hoa", Application.defaultCurie)
      .withLink("profile", "hoa:report")
      // .withLink("hoa:user", routes.Users.show(request.user.userId).absoluteURL(),
      //   Some("Generated by"))
      .withField("forMonth", JsObject(Seq(
        "name" -> JsString(forMonth.monthOfYear.getAsText()),
        "month" -> JsNumber(forMonth.getMonthOfYear),
        "year" -> JsNumber(forMonth.getYear))))
      .withField("generated", JsObject(Seq(
        "name" -> JsString(generationTime.monthOfYear.getAsText()),
        "month" -> JsNumber(generationTime.getMonthOfYear),
        "year" -> JsNumber(generationTime.getYear))))
      .withField("total", totals.asJsObject)
      .withField("paid", paid.asJsObject)
      .withField("unpaid", unpaid.asJsObject)
      .withField("count", docs.size)
    Ok(obj.asJsValue)
  }

  case class Amounts(
    previous: Double,
    rent: Double,
    electricity: Double,
    water: Double,
    cusa: Double) {

    val total = List(previous, rent, electricity, water, cusa).sum

    def +(that: Amounts) = Amounts(
      this.previous + that.previous,
      this.rent + that.rent,
      this.electricity + that.electricity,
      this.water + that.water,
      this.cusa + that.cusa)

    def -(that: Amounts) = Amounts(
      this.previous - that.previous,
      this.rent - that.rent,
      this.electricity - that.electricity,
      this.water - that.water,
      this.cusa - that.cusa)

    val asJsObject = JsObject(Seq(
      "previous" -> JsNumber(previous),
      "rent" -> JsNumber(rent),
      "electricty" -> JsNumber(electricity),
      "water" -> JsNumber(water),
      "cusa" -> JsNumber(cusa),
      "total" -> JsNumber(total)))
  }

  object Amounts {
    val ZERO = Amounts(0.0, 0.0, 0.0, 0.0, 0.0)
  }

  def doubleOrZero(value: JsValue): Double = value match {
    case JsNumber(x) => x.doubleValue
    case JsNull => 0.0
    case _ => throw new IllegalStateException("Not a valid number")
  }

  def extractPaid(doc: Document): Amounts = {
    Logger.debug("amountPaid: " + doc.amountPaid.toString)

    Amounts(
      doubleOrZero(doc.amountPaid \ "previous"),
      doubleOrZero(doc.amountPaid \ "rent"),
      doubleOrZero(doc.amountPaid \ "electricity"),
      doubleOrZero(doc.amountPaid \ "water"),
      doubleOrZero(doc.amountPaid \ "cusa"))
  }

  def extractTotal(doc: Document): Amounts = {

    val sectionTotals = (doc.body \\ "sectionTotal")

    sectionTotals.foreach {
      total => Logger.debug(total.toString)
    }

    def findSectionTotal(key: String): Double =
      sectionTotals
        .find(_ \ "id" == JsString(key))
        .map(_ \ "value")
        .map(doubleOrZero)
        .getOrElse(0.0)

    Amounts(
      findSectionTotal("_previous_total"),
      findSectionTotal("_rent_total"),
      findSectionTotal("_electricity_total"),
      findSectionTotal("_water_total"),
      findSectionTotal("_cusa_total"))
  }
}
