package controllers

import com.nooovle._
import com.nooovle.slick.ConnectionFactory
import com.nooovle.slick.models._
import org.joda.time.DateTime
import org.locker47.json.play._
import play.api._
import play.api.libs.json._
import play.api.mvc.{ Action, RequestHeader }
import scala.slick.driver.H2Driver.simple._
import scala.util.{ Try, Success, Failure }
import securesocial.core._

class Reports(override implicit val env: RuntimeEnvironment[User])
  extends ApiController[User] {

  def show(year: Int, month: Int) = SecuredAction { implicit request =>
    val zeroDefaults = JsObject(Seq(
      "previous" -> JsNumber(0.0),
      "rental" -> JsNumber(0.0),
      "electricty" -> JsNumber(0.0),
      "water" -> JsNumber(0.0),
      "cusa" -> JsNumber(0.0)))

    val forMonth = DateTime.parse(s"${year}-${month}")
    val generationTime = DateTime.now

    val self = routes.Reports.show(year, month)
    val obj = HalJsObject.create(self.absoluteURL())
      .withCurie("hoa", Application.defaultCurie)
      .withLink("profile", "hoa:report")
      .withLink("collection", routes.Reports.list().absoluteURL())
      .withLink("hoa:user", routes.Users.show(request.user.userId).absoluteURL(),
        Some("Generated by"))
      .withField("forMonth", JsObject(Seq(
        "name" -> JsString(forMonth.monthOfYear.getAsText()),
        "month" -> JsNumber(forMonth.getMonthOfYear),
        "year" -> JsNumber(forMonth.getYear))))
      .withField("generated", JsObject(Seq(
        "name" -> JsString(generationTime.monthOfYear.getAsText()),
        "month" -> JsNumber(generationTime.getMonthOfYear),
        "year" -> JsNumber(generationTime.getYear))))
      .withField("total", zeroDefaults)
      .withField("paid", zeroDefaults)
      .withField("unpaid", zeroDefaults)
    Ok(obj.asJsValue)

  }

  def list(offset: Int, limit: Int) = SecuredAction { implicit request =>
    // TODO: Get all unique years and months in documents
    // and list each as a collection of reports
    // Note: No 'select distinct' in Slick for now, so do it in-memory

    val dateStrings = ConnectionFactory.connect withSession { implicit session =>
      documents.map(_.forMonth).list
    }

    val years = dateStrings.groupBy(_.getYear).map(_._1)
    val months = dateStrings.groupBy(_.getMonthOfYear).map(_._1)
    val links = for (year <- years; month <- months) yield {
      JsString(routes.Reports.show(year, month).absoluteURL())
    }

    Ok {
      val self = routes.Reports.list(offset, limit)
      HalJsObject.create(self.absoluteURL())
        .withLink("profile", "hoa:reports")
        .withLink("up", routes.Application.index.absoluteURL())
        .withEmbedded(HalJsObject.empty.withField("items", JsArray(links.toSeq)))
        .asJsValue
    }
  }
}
